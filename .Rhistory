plot(filterCHM~vegfil$height, pch=20,
xlim = pLim, ylim = pLim,
xlab = xLab, ylab = yLab,
main = c(fullSite, "Living Trees"))
lines(c(0,50), c(0,50), col="black", lwd = 3)
dev.off()
print(paste0("Live trees: ", cor(filterCHM,vegfil$height)))
rgb = brick(RGB_file)
png(paste0(resultsDir, fullSite, "_tree_locations.png"),
width = 1000, height = 600, unit = 'px')
ext = extent(c(min(veg$adjEasting-10,  na.rm = TRUE), max(veg$adjEasting+10,  na.rm = TRUE),
min(veg$adjNorthing-10, na.rm = TRUE), max(veg$adjNorthing+10, na.rm = TRUE)))
plotRGB(rgb,
ext = ext,
xlab = "UTM X (m)", ylab = "UTM Y (m)",
main = paste0(fullSite, "Tree Centers in Red"),
axes = TRUE, margins = TRUE, asp = TRUE)
##plot the locations of the trees with a circle proportional to the diameter
symbols(vegfil$adjEasting,
vegfil$adjNorthing,
circles=vegfil$stemDiameter/100/2, inches = 0.1,
lwd = 2, fg = 'red',
add = TRUE)
dev.off()
aop_shp = readOGR("F:/NEON/Site_data/AOP_flightboxesAllSites.shp")
ii = which(aop_shp_UTM@data$siteID == site)
aop_shp_UTM = spTransform(aop_shp, crs(chm))
## extract the field sampling boundary for the desired site
ii = which(aop_shp_UTM@data$siteID == site)
flt_bndry = aop_shp_UTM@polygons[[ii]]@Polygons[[1]]@coords
flt_bndry
x =  aop_shp_UTM@polygons[[ii]]
x@Polygons@Polygons
x@Polygons
ii
aop_shp_UTM$siteID
aop_shp_UTM$siteID[6]
which(aop_shp_UTM$siteID == site)
which(aop_shp_UTM@data$siteID == site)
png(paste0(resultsDir, fullSite, "_tree_locations.png"),
width = 1000, height = 600, unit = 'px')
ext = extent(c(min(veg$adjEasting-20,  na.rm = TRUE), max(veg$adjEasting+20,  na.rm = TRUE),
min(veg$adjNorthing-20, na.rm = TRUE), max(veg$adjNorthing+20, na.rm = TRUE)))
plotRGB(rgb,
ext = ext,
xlab = "UTM X (m)", ylab = "UTM Y (m)",
main = c(fullSite, "Tree Centers in Red"),
axes = TRUE, margins = TRUE, asp = TRUE)
## plot the RGB image, overlay with the tree circles
## limit the extent to the area of veg
symbols(vegfil$adjEasting,
vegfil$adjNorthing,
circles=vegfil$stemDiameter/100/2, inches = 0.1,
lwd = 2, fg = 'red',
add = TRUE)
dev.off()
write.csv(veg, paste0(resultsDir, paste0(fullSite, '_vegsub.csv')))
library(sp)
library(sp)
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
aop_shp = readOGR("F:/NEON/Site_data/AOP_flightboxesAllSites.shp")
## convert projection from lat/lon to UTM (CHM is in UTM)
aop_shp_UTM = spTransform(aop_shp, crs(chm))
## extract the field sampling boundary for the desired site
ii = which(aop_shp_UTM@data$siteID == site)
flt_bndry = aop_shp_UTM@polygons[[ii]]@Polygons[[1]]@coords
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
file.exists(RGB_file)
RGB_file
plotRGB(rgb,
ext = ext,
xlab = "UTM X (m)", ylab = "UTM Y (m)",
main = c(fullSite, "Tree Centers in Red"),
axes = TRUE, margins = TRUE, asp = TRUE)
file.exists(RGB_file)
rgb = brick(RGB_file)
png(paste0(resultsDir, fullSite, "_tree_locations.png"),
width = 1000, height = 600, unit = 'px')
ext = extent(c(min(veg$adjEasting-20,  na.rm = TRUE), max(veg$adjEasting+20,  na.rm = TRUE),
min(veg$adjNorthing-20, na.rm = TRUE), max(veg$adjNorthing+20, na.rm = TRUE)))
plotRGB(rgb,
ext = ext,
xlab = "UTM X (m)", ylab = "UTM Y (m)",
main = c(fullSite, "Tree Centers in Red"),
axes = TRUE, margins = TRUE, asp = TRUE)
## plot the RGB image, overlay with the tree circles
## limit the extent to the area of veg
symbols(vegfil$adjEasting,
vegfil$adjNorthing,
circles=vegfil$stemDiameter/100/2, inches = 0.1,
lwd = 2, fg = 'red',
add = TRUE)
dev.off()
write.csv(veg, paste0(resultsDir, paste0(fullSite,'_vegfil.csv')))
## plot the outlines of the NEON field sampling plots.
## read in the shape file with the field sampling boundaries
aop_shp = readOGR("F:/NEON/Site_data/AOP_flightboxesAllSites.shp")
## convert projection from lat/lon to UTM (CHM is in UTM)
aop_shp_UTM = spTransform(aop_shp, crs(chm))
## extract the field sampling boundary for the desired site
ii = which(aop_shp_UTM@data$siteID == site)
flt_bndry = aop_shp_UTM@polygons[[ii]]@Polygons[[1]]@coords
plotRGB(rgb,
ext = ext,
xlab = "UTM X (m)", ylab = "UTM Y (m)",
main = c(fullSite, "Tree Centers in Red"),
axes = TRUE, margins = TRUE, asp = TRUE)
chm <- raster(CHM_file)
file.exists(CHM_file)
CHM_file
chm <- raster(CHM_file)
png(filename = paste0(resultsDir, fullSite, "_CHM.png"), width = 800, height = 800)
plot(chm,
col = topo.colors(5),
xlab = "Easting (m)", ylab = "Northing (m)",
main = c(fullSite, 'Canopy Height'))
dev.off()
library(sp)
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
file.exists(CHM_file)
CHM_file
F:\NEON\data\DP3.30015.001\neon-aop-products\2021\FullSite\D19\2021_HEAL_4\L3\DiscreteLidar\CanopyHeightModelMosaic
chm <- raster(CHM_file)
chm <- raster(CHM_file)
chm
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
rgb = brick(RGB_file)
RGB_file
rgb = brick(RGB_file)
png(paste0(resultsDir, fullSite, "_tree_locations.png"),
width = 1000, height = 600, unit = 'px')
ext = extent(c(min(veg$adjEasting-20,  na.rm = TRUE), max(veg$adjEasting+20,  na.rm = TRUE),
min(veg$adjNorthing-20, na.rm = TRUE), max(veg$adjNorthing+20, na.rm = TRUE)))
plotRGB(rgb,
ext = ext,
xlab = "UTM X (m)", ylab = "UTM Y (m)",
main = c(fullSite, "Tree Centers in Red"),
axes = TRUE, margins = TRUE, asp = TRUE)
## plot the RGB image, overlay with the tree circles
## limit the extent to the area of veg
symbols(vegfil$adjEasting,
vegfil$adjNorthing,
circles=vegfil$stemDiameter/100/2, inches = 0.1,
lwd = 2, fg = 'red',
add = TRUE)
dev.off()
write.csv(veg, paste0(resultsDir, paste0(fullSite,'_vegfil.csv')))
## plot the outlines of the NEON field sampling plots.
## read in the shape file with the field sampling boundaries
aop_shp = readOGR("F:/NEON/Site_data/AOP_flightboxesAllSites.shp")
## convert projection from lat/lon to UTM (CHM is in UTM)
aop_shp_UTM = spTransform(aop_shp, crs(chm))
## extract the field sampling boundary for the desired site
ii = which(aop_shp_UTM@data$siteID == site)
flt_bndry = aop_shp_UTM@polygons[[ii]]@Polygons[[1]]@coords
source("F:/NEON/Tutorials/VegStrCHMR/R/download_chm_RGB.r")
source("F:/NEON/Tutorials/VegStrCHMR/R/download_chm_RGB.r")
source("F:/NEON/Tutorials/VegStrCHMR/R/download_chm_RGB.r")
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
veglist <- loadByProduct(dpID="DP1.10098.001",
site= site,
package="basic",
check.size = FALSE,
startdate = startDate,
enddate   = endDate,
nCores =  6)
library(sp)
library(raster)
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
library(neonUtilities)
library(geoNEON)
## library(dplyr)
library(gdalUtilities)
library(rgdal)
options(stringsAsFactors=F)
domain    = 'D18'
site      = 'TOOL'
year      = '2019'
visit     = '3'
fullSite  = paste0(year, '_', site, '_', visit)
startDate = paste0(year, '-01')
startDate = paste0(year, '-01')
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
endDate   = paste0(year, '-12')
resultsDir = './results/'
CHMdataRoot  = paste0("F:/NEON/data/DP3.30015.001/neon-aop-products/",year,"/FullSite/",domain,"/",fullSite,"/L3/")
RGBdataRoot  = paste0("F:/NEON/data/DP3.30010.001/neon-aop-products/",year,"/FullSite/",domain,"/",fullSite,"/L3/")
CHM_file  = paste0(CHMdataRoot, "DiscreteLidar/CanopyHeightModelGtifMosaic/", fullSite, "_CHM_mosaic.tif")
RGB_file  = paste0(RGBdataRoot, "Camera/Mosaic/", fullSite, "_RGB_mosaic.tif")
## Above is dominated by spruce treed (see book ("Tree Line")
whiteSpruce = "Picea glauca (Moench) Voss"
blackSpruce = "Picea mariana (Mill.) Britton, Sterns & Poggenb."
spruceTrees = factor(c(whiteSpruce, blackSpruce))
## list of scientific names found in HEAL
species = factor(c('species',
"Alnus viridis (Chaix) DC",
"Betula glandulosa Michx.",
"Betula occidentalis Hook.",
"Ledum palustre L.",
"Picea glauca (Moench) Voss",
"Picea mariana (Mill.) Britton, Sterns & Poggenb.",
"Salix bebbiana Sarg.",
"Salix glauca L.",
"Salix myrtillifolia Andersson",
"Salix pulchra Cham.",
"Vaccinium uliginosum L."))
## which of species are trees, not shrubs (needs review)
isTree = c(FALSE, TRUE , TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)
## x and y plot labels
xLab = "Lidar Canopy Height Model (m)"
yLab = "Ground Measured Canopy Height (m)"
## ----veglist, results="hide"-----------------------------------------------------------------------------
if(exists("veglist") == FALSE)
{
veglist <- loadByProduct(dpID="DP1.10098.001",
site= site,
package="basic",
check.size = FALSE,
startdate = startDate,
enddate   = endDate,
nCores =  6)
}
{
vegmap <- getLocTOS(veglist$vst_mappingandtagging,
"vst_mappingandtagging")
}
## ----veg_merge-------------------------------------------------------------------------------------------
if(exists("veg") == FALSE)
{
veg <- merge(veglist$vst_apparentindividual, vegmap,
by=c("individualID","namedLocation",
"domainID","siteID","plotID"))
}
## filter by trees, not shrubs
if(exists("vegsub") == FALSE)
{
vegsub = veg[which(veg$growthForm=="single bole tree" |
veg$growthForm=="multi-bole tree"  |
veg$growthForm=="small tree"),]
}
## filter by trees, not shrubs
if(exists("vegsub") == FALSE)
xxx
source("F:/NEON/Tutorials/VegStrCHMR/NEON_chm_analysis.R")
source("F:/NEON/Tutorials/VegStrCHMR/R/download_chm_RGB.r")
source("F:/NEON/Tutorials/VegStrCHMR/R/download_chm_RGB.r")
library(sp)
library(raster)
library(neonUtilities)
library(geoNEON)
site
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
data_path = file.path(data_path_root,veg_dpid,"neon-aop-products",year,
#                       "FullSite",domain,fullSite,"L1","veg_str")
sdkgfa'f'
data_path = file.path(data_path_root,veg_dpid,"neon-aop-products",year,
"FullSite",domain,fullSite,"L1","veg_str")
data_path
data_path = file.path(data_path_root,veg_dpid,"neon-aop-products",year,
"FullSite",domain,fullSite,"L1","veg_str", "filesToStack10098")
file_name = file.find("*.zip", dir = data_path)
file_name = find.file("*.zip", dir = data_path)
install.packages("sp")
install.packages("sp")
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
data_path = file.path(data_path_root,veg_dpid,"neon-aop-products",year,
"FullSite",domain,fullSite,"L1","veg_str", "filesToStack10098")
install.packages('reader')
find.file("*.zip", dir = data_path)
library(reader)
find.file("*.zip", dir = data_path)
find.file(data_path)
data_path
find.file("*.zip),data_path)
""
"
find.file("*.zip"),data_path)
find.file("*.zip",data_path)
list.files(path = data_path, pattern = '*.zip')
zip_file = list.files(path = data_path, pattern = '*.zip')
zip_file[1]
zip_file[0]
zip_file[1]
zip.unpack(zip_file)
unzip(zip_file)
unzip()
unzip(zip_file)
unzip(zip_file, exdir = "./")
unzip(zip_file, exdir = ".")
unzip(zip_file, list = TRUE)
unzip(zip_file, exdir = ".")
unzip(data_path+"/"+zip_file, exdir = ".")
unzip(file_path(data_path, zip_file), exdir = ".")
unzip(file.path(data_path, zip_file), exdir = ".")
getwd()
unzip(file.path(data_path, zip_file), exdir = "./data")
.libPaths()
zip_file
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
ncores = 6
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
nores = 6
nCores = 6
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
tempdir()
source("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
zip_file != ""
zip_file == ""
zip_file
zip_file[1]
zip_file[1] == ""
zip_file[1] != ""
data_path
list.files(path = data_path, pattern = '*.zip')
list.files(path = data_path, pattern = '*.zip', full.names = TRUE)
zip_file[]
zip_file[0]
zip_file[1]
mpdir()
tempdir()
file.exists(data_path)
source("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
exists(veglist)
View(veglist)
veglist
View(veglist)
View(veglist)
exists(veglist)
exists("veglist")
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
data_path = file.path(data_path_root,veg_dpid,"neon-aop-products",year,
"FullSite",domain,fullSite,"L1","veg_str", "filesToStack10098")
data_path = file.path(data_path_root,veg_dpid,"neon-aop-products",year,
"FullSite",domain,fullSite,"L1","veg_str", "filesToStack10098")
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
is.na(zip_file)
is.na(zip_file)[1]
is.na(zip_file)[0]
zipsByProduct(dpID=dpID, site=site, startdate=startdate, enddate=enddate, package="basic",
release="current", timeIndex="all", tabl="all", check.size=FALSE, nCores = nCores,
savepath=data_path, load=TRUE)
zipsByProduct(dpID=dpID, site=site, startdate=startdate, enddate=enddate, package="basic",
release="current", timeIndex="all", tabl="all", check.size=FALSE,
savepath=data_path, load=TRUE)
zipsByProduct(dpID=veg_dpid, site=site, startdate=startdate, enddate=enddate, package="basic",
release="current", timeIndex="all", tabl="all", check.size=FALSE,
savepath=data_path, load=TRUE)
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=FALSE)
data_path
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=FALSE)
zip_file = list.files(path = data_path, pattern = '*.zip')
zip_file
zip_file[1]
data_path
zip_file = list.files(path = data_path, pattern = '*.zip')
zip_files[1]
)    zip_file = list.files(path = data_path, pattern = '*.zip')
)    zip_file = list.files(path = data_path, pattern = "*.zip")
zip_file = list.files(path = data_path, pattern = "*.zip")
zip_file
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=FALSE)
nCores
nCores = 6
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=FALSE)
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
Q
Q
Q
Q
source("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
zip_file = list.files(path = data_path, pattern = '*.zip', recursive = TRUE)
zip_files
zip_file
list.files(path = data_path, pattern = '*.zip', recursive = TRUE)
list.files(path = data_path, pattern = '*.zip', recursive = TRUE)[1]
zipsByProduct(dpID=veg_dpid, site=site, startdate=startdate, enddate=enddate, package="basic",
release="current", timeIndex="all", tabl="all", check.size=FALSE,
savepath=data_path, load=TRUE)
file.exists(data_path)
data_path
data_path = file.path(data_path_root,veg_dpid,"neon-aop-products",year,
"FullSite",domain,fullSite,"L1","veg_str")
file.exists(data_path)
zip_file = list.files(path = data_path, pattern = '*.zip', recursive = TRUE)
(is.na(zip_file[1]))
zipsByProduct(dpID=veg_dpid, site=site, startdate=startdate, enddate=enddate, package="basic",
release="current", timeIndex="all", tabl="all", check.size=FALSE,
savepath=data_path, load=TRUE)
out <- stackByTable(filepath= data_path,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
out <- stackByTable(filepath= file_path(data_path,substr(veg_dpID, 5, 9)),
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
out <- stackByTable(filepath= file.path(data_path,substr(veg_dpID, 5, 9)),
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
out <- stackByTable(filepath= file.path(data_path,substr(veg_dpid, 5, 9)),
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
file.path(data_path,substr(veg_dpid, 5, 9)
)
file.path(data_path,paset("filestostack",substr(veg_dpid, 5, 9))
)
file.path(data_path,pasTE)("filestostack",substr(veg_dpid, 5, 9))
file.path(data_path,paste("filestostack",substr(veg_dpid, 5, 9))
)
file.path(data_path,paste("filestostack",substr(veg_dpid, 5, 9), sep = ''))
out <- stackByTable(filepath= file.path(data_path,paste("filestostack",substr(veg_dpid, 5, 9), sep =''),
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
)
filepath= file.path(data_path,paste("filestostack",substr(veg_dpid, 5, 9), sep =''))
filepath
zip_file
zip_file[1]
zip_file = list.files(path = data_path, pattern = '*.zip', recursive = TRUE)
zip_file[1]
zip_file = list.files(path = data_path, pattern = '*.zip', recursive = TRUE, full.names = TRUE)
zip_file
out <- stackByTable(filepath= zip_files,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
zip_file = list.files(path = data_path, pattern = '*.zip', recursive = TRUE, full.names = TRUE)
out <- stackByTable(filepath= zip_file,
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
basename(zip_file)
pathname(zip_file)
dirname(zip_file)
out <- stackByTable(filepath= dirname(zip_file),
savepath="./data", folder=TRUE, nCores=nCores,
saveUnzippedFiles=TRUE)
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
veglist <- loadByProduct(dpID="DP1.10098.001",
site=site,
package="basic",
check.size = FALSE)
site
View(veglist)
veglist <- loadByProduct(dpID="DP1.10098.001",
site=site,
startdate=startdate,
enddate=enddate
package="basic",
veglist <- loadByProduct(dpID="DP1.10098.001",
site=site,
startdate=startdate,
enddate=enddate,
package="basic",
nCores = nCores
check.size = FALSE)
veglist <- loadByProduct(dpID="DP1.10098.001",
site=site,
startdate=startdate,
enddate=enddate,
package="basic",
nCores = nCores,
check.size = FALSE)
veglist <- loadByProduct(dpID="DP1.10098.001",
site=site,
startdate=startdate,
enddate=enddate,
package="basic",
nCores = nCores,
check.size = FALSE)
exists("veglist")
source("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
debugSource("F:/NEON/Tutorials/R/VegStrCHMR/NEON_chm_analysis.R", echo=TRUE)
chm10.values
CHM10.values
CHM10
CHM10.names
binCHM
png(paste0(resultsDir, fullSite, "_low_res_chm.png"),  width = 800, height = 600)
pLim = c(min(min(vegbin$height, na.rm = TRUE), min(binCHM, na.rm = TRUE)),
max(max(vegbin$height, na.rm = TRUE), max(binCHM, na.rm = TRUE)))
plot(binCHM~vegbin$height, pch=20,
xlim = pLim, ylim = pLim,
xlab = xLab, ylab = yLab,
main = paste0(c(fullSite, "Low Res CHM")))
lines(c(0,50), c(0,50),col="black", lwd = 3)
dev.off()
png(paste0(resultsDir, fullSite, "_low_res_chm.png"),  width = 800, height = 600)
plot(binCHM~vegbin$height, pch=20,
xlim = pLim, ylim = pLim,
xlab = xLab, ylab = yLab,
main = paste0(c(fullSite, "Low Res CHM")))
lines(c(0,50), c(0,50),col="black", lwd = 3)
dev.off()
which(!is.na(vegfil$height))
View(flt_bndry)
View(flt_bndry)
